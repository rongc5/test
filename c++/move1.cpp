#include <iostream>
#include  <utility>
#include <string>


using namespace std;

/**
 *左值与右值的根本区别在于是否允许取地址&运算符获得对应的内存地址。

 一般来说，变量可以取地址，所以是左值，但是常量和临时对象等不可以取地址，所以是右值。
 *
 *move 是将左值， 右值转化为右值引用
 *
 *
 * ，使用一个&时则代表是左值引用，而使用两个&&则代表右值引用
 *
 *
 * 移动语义意味着两点：
 *
 * 原对象不再被使用，如果对其使用会造成不可预知的后果。
 * 所有权转移，资源的所有权被转移给新的对象。
 * 移动语义通过移动构造函数和移动赋值操作符实现，其与拷贝构造函数类似，区别如下：
 *
 * 参数的符号必须为右值引用符号，即为&&。
 * 参数不可以是常量，因为函数内需要修改参数的值
 * 参数的成员转移后需要修改（如改为nullptr），避免临时对象的析构函数将资源释放掉。
 */

int main(int argc, char *argv[])
{
    const int &b = std::move(1);

    cout << b << endl;

    return 0;
}
